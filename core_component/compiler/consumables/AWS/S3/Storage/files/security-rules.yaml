AWSTemplateFormatVersion: "2010-09-09"
Description: AWS::S3::Storage - {{ component_name }} - security rules

Parameters:
  KmsKeyArn:
    Type: String
    Default: ""

  ResourcesStackName:
    Type: String
    Default: ""

  SecurityStackName:
    Type: String

  Stage:
    Type: String
    Default: "final"

Resources:
  DefaultImport:
    Metadata:
      DefaultImport:
        Fn::ImportValue:
          Fn::Sub: "${SecurityStackName}:DefaultExport"
    Type: AWS::CloudFormation::WaitConditionHandle

  {% set resource = app[component_name].Configuration.Storage %}
  {% set scope = resource.Properties.Scope | d('build') | capitalize %}
  {% if resource.Properties.Prefix | d('') == '' %}
    {% set prefix = context[scope + 'FilesPrefix'] %}
  {% else %}
    {% set prefix = context[scope + 'FilesPrefix'] + '/' + resource.Properties.Prefix %}
  {% endif %}
  {% for rule in app[component_name].Configuration.Storage | iam_rules %}
  IamPolicy{{ loop.index }}:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: {{ component_name }}-{{ context.Build }}-x{{ loop.index }}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetBucketLocation
              {% if 'list' in rule.Allow %}
              # List permissions
              - s3:ListBucket
              - s3:ListBucketVersions
              {% endif %}
              {% if 'write' in rule.Allow %}
              # Write permissions
              - s3:ListBucketMultipartUploads
              {% endif %}
            Resource:
              - "arn:aws:s3:::{{ context.FilesBucketName }}"
            Condition:
              StringEquals:
                s3:prefix: "{{ prefix }}/"
          {% if 'read' in rule.Allow or 'write' in rule.Allow or 'delete' in rule.Allow %}
          - Effect: Allow
            Action:
              {% if 'read' in rule.Allow %}
              # Read permissions
              - s3:GetObject*
              {% endif %}
              {% if 'write' in rule.Allow %}
              # Write permissions
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:PutObjectTagging
              - s3:RestoreObject
              {% endif %}
              {% if 'delete' in rule.Allow %}
              # Delete permissions
              - s3:DeleteObject
              - s3:DeleteObjectVersion
              {% endif %}
            {% endif %}
            Resource:
              - "arn:aws:s3:::{{ context.FilesBucketName }}/{{ prefix }}/*"
      Roles:
        - Fn::ImportValue: "{{ rule.Value }}"   # {{ rule.Description }}

  {% endfor %}
