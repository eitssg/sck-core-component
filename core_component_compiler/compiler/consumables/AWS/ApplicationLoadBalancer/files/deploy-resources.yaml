{% import "AWS/_shared/vars/names.j2" as names with context %}

AWSTemplateFormatVersion: "2010-09-09"
Description: AWS::ApplicationLoadBalancer - {{ component_name }} - resources

Parameters:
  KmsKeyArn:
    Type: String
    Default: ""

  SecurityStackName:
    Type: String

Resources:

  # Developer needs to define "DefaultTargetGroup" for the default TG to be invoked.
  {% if app[component_name].Configuration.DefaultTargetGroup is not defined %}
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: HTTPS
      VpcId:
        {% if (app[component_name].Configuration.ApplicationLoadBalancer.Properties.Scheme | d('internal')) == 'internet-facing' %}
        Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:VpcId"
        {% else %}
        Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:VpcId"
        {% endif %}
  {% endif %}

  # Load balancer
  {% set resource = app[component_name].Configuration.ApplicationLoadBalancer %}
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: {{ resource.Properties.Scheme | d('internal') }}
      SecurityGroups:
        - Fn::ImportValue:
            Fn::Sub: "${SecurityStackName}:SecurityGroupId"
        {% for rule in resource | ip_rules(source_types=['sg-attachment']) %}
        - Fn::ImportValue: "{{ rule.Value }}"   # {{ rule.Description }}
        {% endfor %}
      Subnets:
        {% if (app[component_name].Configuration.ApplicationLoadBalancer.Properties.Scheme | d('internal')) == 'internet-facing' %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:{{ context.SubnetAliases['public'] }}1Id"
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:{{ context.SubnetAliases['public'] }}2Id"
        {% if context.AzCount >= 3 %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:{{ context.SubnetAliases['public'] }}3Id"
        {% endif %}
        {% else %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:{{ context.SubnetAliases['private'] }}1Id"
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:{{ context.SubnetAliases['private'] }}2Id"
        {% if context.AzCount >= 3 %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:{{ context.SubnetAliases['private'] }}3Id"
        {% endif %}
        {% endif %}

  # Load balancer listeners (i.e. HTTP, HTTPS)
  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('Listener') %}
  {{ resource_name }}:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: DefaultTargetGroup  # FIXME specific target group rather than the default?
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      {% if resource.Properties.Certificates is defined %}
      Certificates:
        {{ resource.Properties.Certificates | to_yaml | indent(8) }}
      {% endif %}
      Port: {{ resource.Properties.Port }}
      Protocol: {{ resource.Properties.Protocol }}

  {% endfor %}

  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('ListenerRule') %}
  {{ resource_name }}:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        {{ resource.Properties.Actions | to_yaml | indent(8) }}
      Conditions:
        {{ resource.Properties.Conditions | to_yaml | indent(8) }}
      ListenerArn:
        {{ resource.Properties.ListenerArn | to_yaml | indent(8) }}
      Priority: {{ resource.Properties.Priority }}

  {% endfor %}

  # (Custom) Target Groups - aiming to make transition to core CFN seamless to apps - just roll your stacks.
  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('TargetGroup') %}
  {% set tg_name = [names.base_build_name_hyphenated, resource_name] | join('-') | shorten_unique(32, unique_length=16) %}
  {{ resource_name }}:
    Type: Custom::ALB-TargetGroup
    Properties:
      ServiceToken:
        Fn::ImportValue: {{ context.CustomResourceExportName }}  # Stack export for Custom Resource Lambda ARN.
      Name: {{ tg_name }}
      TargetType: lambda
      Targets:
        {% for target in resource.Properties.Targets %}
        - Id:
            Fn::ImportValue:
              "{{ target.Id | output_name }}"
        {% endfor %}
      Tags: # Allow cfndelta lambda access to tags
        {{ 'build' | aws_tags | to_yaml | indent(8) }}

  {% endfor %}

Outputs:

  LoadBalancerDnsName:
    Value:
      Fn::GetAtt: [ ApplicationLoadBalancer, DNSName ]
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:LoadBalancerDnsName"

  LoadBalancerHostedZoneId:
    Value:
      Fn::GetAtt: [ ApplicationLoadBalancer, CanonicalHostedZoneID ]
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:LoadBalancerHostedZoneId"

  LoadBalancerArn:
    Value:
      Ref: ApplicationLoadBalancer
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:LoadBalancerArn"

  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('Listener') %}
  {{ resource_name }}Arn:
    Value:
      Ref: {{ resource_name }}
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:{{ resource_name }}Arn"

  {% endfor %}
