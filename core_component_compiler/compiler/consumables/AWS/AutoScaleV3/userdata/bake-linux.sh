MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=BlockBoundaryString12345AbCdE

--BlockBoundaryString12345AbCdE
Content-Type: text/cloud-config

repo_update: false
repo_upgrade: none
bootcmd:
    - 'set -x'
    - 'grep -v "proxy=" /etc/yum.conf > /tmp/yum.conf && mv /tmp/yum.conf /etc/yum.conf'  # Remove proxy config from yum.conf
    {% if context.ProxyUrl | d("") != "" %}
    - 'echo "proxy={{ context.ProxyUrl }}" >> /etc/yum.conf'  # Proxy in to yum.conf
    {% endif %}
    - 'grep -q http_caching /etc/yum.conf || echo http_caching=packages >> /etc/yum.conf'
    {% if 'NameServers' in context %}
    - 'echo "# DNS resolver configuration" > /etc/resolv.conf'
    - 'echo -e "# Generated by the pipeline\n" >> /etc/resolv.conf'
    {% for nameserver in context.NameServers %}
    - 'echo "nameserver {{ nameserver }}" >> /etc/resolv.conf'
    {% endfor %}
    {% endif %}
    - 'echo "options timeout:2 attempts:3" >> /etc/resolv.conf'
    - 'uptime'
    - 'exit 0'

--BlockBoundaryString12345AbCdE
Content-Type: text/x-shellscript

#!/bin/bash
set -ex

# log everything here to user-data
#DEVOPS-10094 removed to support rhel7 userdata execution fix. enable me back with proper support for both OS
#exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

signal () {
    EXIT_CODE=$?
    [ $EXIT_CODE -eq 0 ] || echo "=== End Userdata - FAILED ==="
    /opt/aws/bin/cfn-signal --region ${AWS::Region} --stack ${AWS::StackName} --resource BakeInstance --exit-code $EXIT_CODE
}
trap signal EXIT

echo "=== Begin Userdata ==="

mkdir -p /etc/profile.d || true
echo "# Proxy configuration" > /etc/profile.d/proxy.sh
echo -e "# Generated by the pipeline\n" >> /etc/profile.d/proxy.sh
if [ -n "{{ context.ProxyUrl }}" ]; then
    echo "export http_proxy='{{ context.ProxyUrl }}'" >> /etc/profile.d/proxy.sh
    echo "export https_proxy='{{ context.ProxyUrl }}'" >> /etc/profile.d/proxy.sh
    echo "export HTTP_PROXY='{{ context.ProxyUrl }}'" >> /etc/profile.d/proxy.sh
    echo "export HTTPS_PROXY='{{ context.ProxyUrl }}'" >> /etc/profile.d/proxy.sh
    echo "export no_proxy='{{ context.NoProxy }}'" >> /etc/profile.d/proxy.sh
    echo "export NO_PROXY='{{ context.NoProxy }}'" >> /etc/profile.d/proxy.sh
fi

echo "# Deployment information" > /etc/profile.d/deployment_information.sh
echo -e "# Generated by the pipeline\n" >> /etc/profile.d/deployment_information.sh

echo "export PIPELINE_AWS_REGION=${AWS::Region}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_AWS_ACCOUNT_ID=${AWS::AccountId}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_ENVIRONMENT={{ context.Environment }}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_KMS_KEY_ARN=${KmsKeyArn}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_PORTFOLIO={{ context.Portfolio }}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_APP={{ context.App }}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_BRANCH={{ context.Branch }}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_BRANCH_SHORT_NAME={{ context.BranchShortName }}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_BUILD={{ context.Build }}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_COMPONENT={{ component_name }}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_BUCKET_NAME={{ context.FilesBucketName }}" >> /etc/profile.d/deployment_information.sh
echo "export PIPELINE_BUCKET_BUILD_PREFIX={{ context.BuildFilesPrefix }}" >> /etc/profile.d/deployment_information.sh

# Source the profile scripts for this session
source /etc/profile.d/proxy.sh
source /etc/profile.d/deployment_information.sh

# Clean yum cache
yum --noplugins clean expire-cache

# Per-distro tweaks before running cfn-init.
{% include "AWS/_shared/userdata/distro.sh" %}

echo "Executing cfn-init"
tail -F /var/log/cfn-init.log --pid $$ -q &

# Move old cfn-*.log and cloud-*.log files
for file in "${!LOG_FILES[@]}"
do
  [ -f $file ] && mv $file $file.$(date '+%s')
  touch $file
done

/opt/aws/bin/cfn-init --region ${AWS::Region} --stack ${AWS::StackName} --resource BakeInstance --configsets default

python /tmp/awslog_convert.py -a /var/awslogs -o /tmp/config.json -r {{ context.AwsRegion }}
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -s -c file:/tmp/config.json
echo "=== End Userdata - SUCCESS ==="

--BlockBoundaryString12345AbCdE
