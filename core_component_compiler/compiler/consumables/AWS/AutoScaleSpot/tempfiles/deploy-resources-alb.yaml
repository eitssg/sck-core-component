{% if 'ApplicationLoadBalancer' in app[component_name].Configuration %}
{% import "AWS/_shared/vars/names.j2" as names with context %}
{% macro include_userdata(image_name) %}
{% if 'amazon-linux' in image_name or 'rhel' in image_name or 'centos' in image_name %}
{% include "AWS/AutoScaleSpot/userdata/deploy-linux.sh" %}
{% elif 'win' in image_name %}
{% include "AWS/AutoScaleSpot/userdata/deploy-windows.ps1" %}
{% else %}
{{ raise("Unknown image '" + image_name + "', cannot load userdata") }}
{% endif %}
{% endmacro %}

AWSTemplateFormatVersion: "2010-09-09"
Description: AWS::AutoScaleSpot - {{ component_name }} - resources

Parameters:
  ImageId:
    Type: String
    Default: "NO_BAKE_IMAGE"
  KmsKeyArn:
    Type: String
    Default: ""
  SecurityStackName:
    Type: String

Resources:

  {% if app[component_name].Configuration.DefaultTargetGroup is not defined %}
  # Default Target Group
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: HTTPS
      VpcId:
        {% if (app[component_name].Configuration.ApplicationLoadBalancer.Properties.Scheme | d('internal')) == 'internet-facing' %}
        Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:VpcId"
        {% else %}
        Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:VpcId"
        {% endif %}
  {% endif %}

  # Target Group
  # See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('TargetGroup') %}
  {{ resource_name }}:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      {% if resource.Properties.HealthCheckProtocol is defined %}
      HealthCheckProtocol: {{ resource.Properties.HealthCheckProtocol }}
      {% endif %}
      HealthCheckPath:  {{ resource.Properties.HealthCheckPath }}
      {% if resource.Properties.HealthCheckPort is defined %}
      HealthCheckPort: {{ resource.Properties.HealthCheckPort }}
      {% endif %}
      HealthyThresholdCount: {{ resource.Properties.HealthCheckTimeoutSeconds | d(3) }}
      UnhealthyThresholdCount: {{ resource.Properties.UnhealthyThresholdCount | d(5) }}
      HealthCheckTimeoutSeconds: {{ resource.Properties.HealthCheckTimeoutSeconds | d(3) }}
      HealthCheckIntervalSeconds: {{ resource.Properties.HealthCheckIntervalSeconds | d(5) }}
      {% if resource.Properties.Matcher is defined %}
      Matcher:
        HttpCode: {{ resource.Properties.Matcher.HttpCode | d('200') }}
      {% endif %}
      Port: {{ resource.Properties.Port }}
      Protocol: {{ resource.Properties.Protocol }}
      VpcId:
        {% if (app[component_name].Configuration.ApplicationLoadBalancer.Properties.Scheme | d('internal')) == 'internet-facing' %}
        Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:VpcId"
        {% else %}
        Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:VpcId"
        {% endif %}
      {% if resource.Properties.TargetGroupAttributes is defined %}
      TargetGroupAttributes:
        {{ resource.Properties.TargetGroupAttributes | to_yaml | indent(8) }}
      {% endif %}
  {% endfor %}

  # Application Load Balancer
  {% set resource = app[component_name].Configuration.ApplicationLoadBalancer %}
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      {% if 'LoadBalancerAttributes' in resource.Properties %}
      LoadBalancerAttributes:
        {{ resource.Properties.LoadBalancerAttributes | to_yaml | indent(8) }}
      {% endif %}
      Scheme: {{ resource.Properties.Scheme | d('internal') }}
      SecurityGroups:
        - Fn::ImportValue:
            Fn::Sub: "${SecurityStackName}:LbSecurityGroupId"
        {% for rule in resource | ip_rules(source_types=['sg-attachment']) %}
        - Fn::ImportValue: "{{ rule.Value }}"   # {{ rule.Description }}
        {% endfor %}
      Subnets:
        {% if (app[component_name].Configuration.ApplicationLoadBalancer.Properties.Scheme | d('internal')) == 'internet-facing' %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:{{ context.SubnetAliases['public'] }}1Id"
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:{{ context.SubnetAliases['public'] }}2Id"
        {% if context.AzCount >= 3 %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:{{ context.SubnetAliases['public'] }}3Id"
        {% endif %}
        {% else %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:{{ context.SubnetAliases['private'] }}1Id"
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:{{ context.SubnetAliases['private'] }}2Id"
        {% if context.AzCount >= 3 %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:{{ context.SubnetAliases['private'] }}3Id"
        {% endif %}
        {% endif %}

  {% if (resource.Properties.HttpsRedirect == 'enabled') %}
  # Redirect Listener
  RedirectListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - RedirectConfig:
            Port: 443
            Protocol: "HTTPS"
            StatusCode: HTTP_301
          Type: "redirect"
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
  {% endif %}

  # Load Balancer Listeners
  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('Listener') %}
  {{ resource_name }}:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: DefaultTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      {% if resource.Properties.Certificates is defined %}
      Certificates:
        {{ resource.Properties.Certificates | to_yaml | indent(8) }}
      {% endif %}
      Port: {{ resource.Properties.Port }}
      Protocol: {{ resource.Properties.Protocol }}
  {% endfor %}

    # Load balancer listenercertificate 
  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('ListenerCertificate') %}
  {{ resource_name }}:
    Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
    Properties:
      Certificates:
        {{ resource.Properties.Certificates | to_yaml | indent(8) }}
      ListenerArn:
        {{ resource.Properties.ListenerArn | to_yaml | indent(8) }}
  {% endfor %}

  # Listener Rules
  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('ListenerRule') %}
  {{ resource_name }}:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        {{ resource.Properties.Actions | to_yaml | indent(8) }}
      Conditions:
        {{ resource.Properties.Conditions | to_yaml | indent(8) }}
      ListenerArn:
        {{ resource.Properties.ListenerArn | to_yaml | indent(8) }}
      Priority: {{ resource.Properties.Priority }}
  {% endfor %}

  # Autoscaling group
  {% set resource = app[component_name].Configuration.AutoScalingGroup %}
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: {{ resource | extract('CreationPolicy.AutoScalingCreationPolicy.MinSuccessfulInstancesPercent', 100) | min_int(context.get('MinSuccessfulInstancesPercent', 100)) }}
      ResourceSignal:
        Count: {{ resource.Properties.DesiredCapacity | d(resource.Properties.MinSize) }}
        Timeout: {{ resource | extract('CreationPolicy.ResourceSignal.Timeout', 'PT15M') }}
    Properties:
      Cooldown: {{ resource.Properties.Cooldown | d({'Ref': 'AWS::NoValue'}) }}
      DesiredCapacity: {{ resource.Properties.DesiredCapacity | d({'Ref': 'AWS::NoValue'}) }}
      HealthCheckGracePeriod: {{ resource.Properties.HealthCheckGracePeriod | d(300) }}
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId:
          Ref: launchTemplate
        Version: !GetAtt launchTemplate.LatestVersionNumber
      MaxSize: {{ resource.Properties.MaxSize }}
      MinSize: {{ resource.Properties.MinSize }}
      {% if resource.Properties.LifecycleHookSpecificationList is defined %}
      LifecycleHookSpecificationList:
        {{ resource.Properties.LifecycleHookSpecificationList | to_yaml | indent(8) }}
      {% endif %}
      TargetGroupARNs:
        {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('TargetGroup') %}
        - Ref: {{ resource_name }}
        {% endfor %}
      VPCZoneIdentifier:
        {% if (app[component_name].Configuration.ApplicationLoadBalancer.Properties.Scheme | d('internal')) == 'internet-facing' %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:{{ context.SubnetAliases['app'] }}1Id"
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:{{ context.SubnetAliases['app'] }}2Id"
        {% if context.AzCount >= 3 %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['public'] }}:{{ context.SubnetAliases['app'] }}3Id"
        {% endif %}
        {% else %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:{{ context.SubnetAliases['private'] }}1Id"
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:{{ context.SubnetAliases['private'] }}2Id"
        {% if context.AzCount >= 3 %}
        - Fn::ImportValue: "{{ context.ResourceNamespace | d('core-network') }}:{{ context.VpcAliases['private'] }}:{{ context.SubnetAliases['private'] }}3Id"
        {% endif %}
        {% endif %}
      MetricsCollection:
        - Granularity: 1Minute

  # Launch configuration
  {% set resource = app[component_name].Configuration.launchTemplate %}
  {% if 'BakeInstance' in app[component_name].Configuration %}
  {% set bake_resource = app[component_name].Configuration.BakeInstance %}
  {% set image_alias = bake_resource.Properties.ImageId | image_name %}
  {% else %}
  {% set image_alias = resource.Properties.LaunchTemplateData.ImageId | image_name %}
  {% endif %}
  launchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - agents
            {% if 'config' in resource | extract('Metadata."AWS::CloudFormation::Init"', {}) %}
            - config
            {% endif %}
            {% if 'win' in image_alias %}
            - finalise
            {% endif %}
        agents:
          files:
            {{ agent_files(resource, component_name, image_alias, context, 'nobake') | indent(12) }}
          commands:
            {{ agent_commands(resource, image_alias, context, 'nobake') | indent(12) }}
          services:
            {{ agent_services(resource, image_alias, context, 'nobake') | indent(12) }}
        finalise:
          commands:
            00-signal-success:
              command: !Sub 'cfn-signal.exe -e 0 --region ${AWS::Region} --stack ${AWS::StackId} --resource AutoScalingGroup'
              waitAfterCompletion: '0'
        {% if 'Metadata' in resource %}
        {% if "AWS::CloudFormation::Init" in resource.Metadata %}
        {{ resource | extract('Metadata."AWS::CloudFormation::Init"', {}) | process_cfn_init | to_yaml | indent(8) }}
        {% endif %}
        {% endif %}
      AWS::CloudFormation::Authentication:
        S3AccessAuth:
          type: s3
          roleName:
            Fn::ImportValue:
              Fn::Sub: "${SecurityStackName}:RoleName"
          buckets:
            - "{{ context.FilesBucketName }}"
    Properties:
      LaunchTemplateData:
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
      {% if 'BlockDeviceMappings' in resource.Properties %}
      BlockDeviceMappings:
        {{ resource.Properties.BlockDeviceMappings | ebs_encrypt | to_yaml | indent(8) }}
      {% endif %}
      EbsOptimized: {{ resource.Properties.EbsOptimized | d(false) }}
      {% if 'BakeInstance' in app[component_name].Configuration %}
        InstanceType: {{ resource.Properties.LaunchTemplateData.InstanceType }}
        {% if 'BakeInstance' in app[component_name].Configuration %}
        ImageId:
          Ref: ImageId
        {% else %}
        ImageId: "{{ resource.Properties.LaunchTemplateData.ImageId | image_id }}"
        {% endif %}
        IamInstanceProfile:
          Name:
            Fn::ImportValue:
              Fn::Sub: "${SecurityStackName}:InstanceProfileName"
        Monitoring:
          Enabled: true
        {% if 'BlockDeviceMappings' in resource.Properties %}
        BlockDeviceMappings:
          {{ resource.Properties.LaunchTemplateData.BlockDeviceMappings | ebs_encrypt | to_yaml | indent(8) }}
        {% endif %}
        KeyName: {{ resource.Properties.LaunchTemplateData.KeyName | default({ 'Ref': 'AWS::NoValue' }) }}
        SecurityGroupIds:
          - Fn::ImportValue:
              Fn::Sub: "${SecurityStackName}:SecurityGroupId"
          {% for rule in app[component_name].Configuration.AutoScalingGroup | ip_rules(source_types=['sg-attachment']) %}
          - Fn::ImportValue: "{{ rule.Value }}"   # {{ rule.Description }}
          {% endfor %}
        UserData:
          Fn::Base64:
            Fn::Sub: |
              {{ include_userdata(image_alias) | indent(14) }}

  # Log group metric filters
  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('LogGroupMetricFilter') %}
  {{ resource_name }}:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterPattern: {{ resource.Properties.FilterPattern }}
      LogGroupName: {{ names.log_group_name }}
      MetricTransformations:
      {% for transformation in resource.Properties.MetricTransformations %}
        - MetricValue: {{ transformation.MetricValue }}
          {% if transformation.DefaultValue is defined %}
          DefaultValue: {{ transformation.DefaultValue }}
          {% endif %}
          MetricName: {{ transformation.MetricName }}
          MetricNamespace: {{ names.log_group_name }}
      {% endfor %}
  {% endfor %}

  # Alarms
  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('Alarm') %}
  {% set namespace = names.log_group_name if resource_name.endswith('LogGroupMetricAlarm') else resource.Properties.Namespace | d('AWS/EC2') %}
  {{ resource_name }}:
    Type: AWS::CloudWatch::Alarm
    Properties:
      {% if resource.Properties.AlarmName is defined %}
      AlarmName: "{{ resource.Properties.AlarmName }}"
      {% endif %}
      {% if resource.Properties.AlarmDescription is defined %}
      AlarmDescription: "{{ resource.Properties.AlarmDescription }}"
      {% endif %}
      ActionsEnabled: true
      AlarmActions: {{ resource.Properties.AlarmActions }}
      ComparisonOperator: {{ resource.Properties.ComparisonOperator }}
      {% if resource.Properties.Dimensions is defined %}
      Dimensions:
        {{ resource.Properties.Dimensions | to_yaml | indent(8) }}
      {% elif not resource_name.endswith('LogGroupMetricAlarm') %}
      Dimensions:
        - Name: AutoScalingGroupName
          Value:
            Ref: AutoScalingGroup
      {% endif %}
      EvaluationPeriods: {{ resource.Properties.EvaluationPeriods | d(3) }}
      MetricName: {{ resource.Properties.MetricName | d('CPUUtilization') }}
      Namespace: {{ namespace }}
      Period: {{ resource.Properties.Period | d(60, true) }}
      Statistic: {{ resource.Properties.Statistic | d('Average', true) }}
      Threshold: {{ resource.Properties.Threshold }}
  {% endfor %}

  # Scaling policies
  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('ScalingPolicy') %}
  {{ resource_name }}:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AutoScalingGroup
      Cooldown: {{ resource.Properties.Cooldown }}
      {% if resource.Properties.MetricAggregationType is defined %}
      MetricAggregationType: {{ resource.Properties.MetricAggregationType }}
      {% endif %}
      {% if resource.Properties.PolicyType is defined %}
      PolicyType: {{ resource.Properties.PolicyType }}
      {% endif %}
      ScalingAdjustment: {{ resource.Properties.ScalingAdjustment }}
  {% endfor %}

  # Scheduled actions
  {% for resource_name, resource in app[component_name].Configuration.items() if resource_name.endswith('ScheduledAction') %}
  {{ resource_name }}:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName:
        Ref: AutoScalingGroup
      DesiredCapacity: {{ resource.Properties.DesiredCapacity | default({ 'Ref': 'AWS::NoValue' }) }}
      MaxSize: {{ resource.Properties.MaxSize | default({ 'Ref': 'AWS::NoValue' }) }}
      MinSize: {{ resource.Properties.MinSize | default({ 'Ref': 'AWS::NoValue' }) }}
      Recurrence: {{ resource.Properties.Recurrence | default({ 'Ref': 'AWS::NoValue' }) }}
  {% endfor %}

Outputs:

  LoadBalancerDnsName:
    Value:
      Fn::GetAtt: [ ApplicationLoadBalancer, DNSName ]
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:LoadBalancerDnsName"

  LoadBalancerHostedZoneId:
    Value:
      Fn::GetAtt: [ ApplicationLoadBalancer, CanonicalHostedZoneID ]
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:LoadBalancerHostedZoneId"

  LoadBalancerName:
    Value:
      Ref: ApplicationLoadBalancer
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:LoadBalancerName"

{% else %}
# This application did not specify an ApplicationLoadBalancer.
{% endif %}
